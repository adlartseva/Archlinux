################################
## Pacman - меннеджер пакетов ##
################################

$ sudo nano /etc/pacman.conf  # конфиг пакмана. 

     IgnoreGroup=gnome   # Здесь же можно добавить игнор пакета

     [custom]           # собственный репозиторий
     SigLevel = Optional TrustAll
     Server = file:///home/username/pag

# расширение установочный пакетов по умолчанию - .pkg.tar.xz     

$ sudo pacman -S   # установка пакета

$ pacman -Ql pacman | grep bin  # можно увидеть полный список пакетов пакман     

$ sudo pacman -Sg gnome  # увидеть список пакетов, принадлежащих к группе пакетов

$ sudo pacman -R  # удаление пакета без удаления установленнных зависимостей

$ sudo pacman -Rs  # удаление пакета со всеми зависимостями

$ sudo pacman -Rsc  # удаление пакета, его зависимостей и все пакетов, зависящих от целевого пакета

$ sudo pacman -Rdd  # удаление пакета, который требуется другому пакету, без удаления зависимого пакета

$ sudo pacman -Rn  # удаление пакта с удалением расширения .pacsave

$ sudo pacman -Ss  # поиск пакета

$ pacman -Qs  # поиск пакета среди уже установленных

$ sudo pacman -Si  # отображение подробной инфо о пакете

$ pacman -Qii  # позволит просмотреть список резервных копий файлов и список измененных файлов

$ pacman -Qdt  # получения списка пакетов, которые больше не требуются как зависимости (пакеты, которые могут быть безопасно удалены или "осиротевшие" пакеты)

$ pacman -Qet  # отображения пакетов, которые были установлены явно и от которых не зависят другие пакеты

$ sudo pacman -Sc  # чистка кэша не установленных на данный момент пакетов

$ sudo nano /etc/pacman.conf  # добавим в пакман метод, очистка кэша неустановленных пакетов

    CleanMethod = KeepCurrent

$ sudo pacman -Scc  # полная очистка кэша

$ paccache -r  # по умолчанию удаляет из кэша все версии каждого пакета, кроме трех недавно использовавшихся

$ paccache -ruk0  # Однако, в этом случае paccache не будет проверять, установлен ли пакет на данный момент, оставляя удаленные пакеты в кэше. Для удаления из кэша всех версий удаленных пакетов придется запустить команду еще раз с другими опциями

$ sudo pacman -Sw имя_пакета  # скачать пакет, но не устанавливать его

$ sudo pacman -U /путь/к/пакету/имя_пакета-версия.pkg.tar.xz  # установить локальный пакет

$ sudo pacman -U file://путь/к/пакету/имя_пакета-версия.pkg.tar.xz  # сохранить копию локального устанавливаемого пакета в кэше pacman'а, используйте

$ sudo pacman -U http://www.example.com/repo/example.pkg.tar.xz  # Скачать и установить пакет из удаленного источника

$ expac -H M '%m\t%n' | sort -h  # получить список установленных программ по размеру, который может быть полезен, когда необходимо освободить пространство на жестком диске

$ expac -H M "%011m\t%-20n\t%10d" $( comm -23 <(pacman -Qqen|sort) <(pacman -Qqg base base-devel|sort) ) | sort -n  # лучить список явно установленных пакетов не из base и не из base-devel с размерами и описанием

$ expac --timefmt='%Y-%m-%d %T' '%l\t%n' | sort | tail -20  # последние установлнные пакеты

$ expac -HM "%-20n\t%10d" $( comm -23 <(pacman -Qqt|sort) <(pacman -Qqg base base-devel|sort) )  # список всех установленных пакетов, которые больше не от кого не зависят с описанием

$ sudo pacman -Rns $(pacman -Qtdq)  # удалить пакеты сироты, которые уже не нужны

$ sudo pacman-optimize  # оптимизация базы данных. повышение быстродействия пакман 

$ sudo pacman -Sc && pacman-optimize  # можно использовать комбинацию для увеличения быстродействия: чистка кэна и оптимизация базы данных

$ pacman -Qqen > pkglist.txt  # текущий список non-локальные пакеты

$ sudo pacman -S $(< pkglist.txt)  # установить пакеты из списка

$ sudo pacman -Qenq | pacman -S -  # переустановить все родны пакеты

$ sudo nano /var/log/pacman.log  # лог пакмана

$ sudo nano /var/cache/pacman/pkg/  # здесь пакман хранит кэш

################
## Разширения ##
################

.pacsave  # создаваемая пакманом резервная копия конфига / конфигов приложения

###########
## Опции ##
###########

--needed  # не переустанавливать пакет

--noconfirm  # не спрашивать подтверждения

--confirm  # всегда спрашивать подтверждения

--color auto  # раскрашивать вывод

c  # показать список изменений пакета

i  # показать информацию о пакете (-ii для резервных копий)

c  # удалить старые пакеты из кэша (-cc для всех)

u  # обновить установленные пакеты(-uu разрешает откат версий)

y  # загрузить обновленные базы данных с серверов (-yy принудительно обновить даже если обновленные)

--ignore <пакет>  # пропустить пакет при обновлении (может быть использовано неоднократно)

--needed  # переустанавливать только устаревшие пакеты

--noprogressbar  # не показывать индикатор выполнения при загрузке

################3

pacman не удаляет конфигурационных файлов, созданных самими приложениями (например, скрытые файлы (имя которых начинается с точки) в домашнем каталоге)

#########################
## Отключение Multilib ##
#########################

$ sudo pacman -R $(paclist multilib | cut -f1 -d' ')  # Чтобы восстановить чистую 64-битную систему, выполните следующую команду, которая удалит все пакеты из multilib

$ sudo pacman -S gcc-libs base-devel  # если возникнут проблемы. после повторить первое

##########################################

$ sudo pacman -R $(comm -23 <(pacman -Qq|sort) <((for i in $(pacman -Qqg base); do pactree -ul $i; done)|sort -u|cut -d ' ' -f 1))  # удалить ВСЕ пакеты НЕ из группы base

#####################
## Резервная копия ##
#####################

$ tar -cjf pacman_database.tar.bz2 /var/lib/pacman/local  # резервная копия базы данных пакман

$ sudo cp pacman_database.tar.bz2 /  # для восстановления рзервной копии, перенесем архив в корневой раздел

$ sudo tar -xjvf pacman_database.tar.bz2  # восстановим резервную копию из архива

###########################
## Локальный репозиторий ##
###########################

 $ sudo nano /etc/pacman.conf  # отредактируем конфиг пакмана. 

     [custom]           # собственный репозиторий
     SigLevel = Optional TrustAll
     Server = file:///home/username/pag  # путь до базы данных

$ repo-add /path/to/repo.db.tar.gz /path/to/*.pkg.tar.xz  # создадим базу данных нашего репозитория. Просто хранить все встроенные пакеты , которые будут включены в хранилище в одном каталоге и выполните следующую команду

    repo  # имя custom репозитория

$ repo-add /path/to/repo.db.tar.gz /path/to/packagetoadd-1.0-1-i686.pkg.tar.xz  # Для добавления нового пакета в базу данных, или заменить старую версию существующего пакета в базе данных

##################################
## Увеличение скорости загрузки ##
##################################

# aria2 - легковесная утилита загрузки с возможностью докачки и сегментированной HTTP/HTTPS и FTP загрузки. aria2 - одновременно поддерживает несколько HTTP/HTTPS и FTP подключений к зеркалам Arch, это означает, что может увеличиться скорости загрузки файлов и поиска пакетов

$ sudo pacman -S aria2  # установим пакет

$ sudo nano /etc/pacman.conf  # отрдактируем конфиг

   [options]
   XferCommand = /usr/bin/aria2c --allow-overwrite=true --continue=true --file-allocation=none --log-level=error --max-tries=2 --max-connection-per-server=2 --max-file-not-found=5 --min-split-size=5M --no-conf --remote-time=true --summary-interval=60 --timeout=5 --dir=/ --out %o %u


# расшифровка #

-d, --dir
   Директорию для загруженных файлов брать из настроек pacman.

-o, --output
   Имя полученного файла из загруженного.

%o
   Переменная предоставляющая локальные файлы согласно настройкам pacman.

%u
   Переменная предоставляюща загруженные URL согласно настройкам pacman.   

#################
## pacsave
#################

.pacsave  # может быть создан во время удаления (pacman -R) или обновления (когда необходимо сперва удалить предыдущую версию) пакета. Если в базе данных pacman имеется запись о том, что необходимо создать резервную копию какого-либо файла, принадлежащего пакету, будет создан файл .pacsave.

.pacnew  # требуют ручного вмешательства пользователя, и хорошей практикой является их обработка непосредственно после любых обновлений или удалений пакетов. Если этого не делать, неправильные файлы конфигурации могут привести к неправильному функционированию или вообще невозможности запуска программного обеспечения

.pacorig  # Поскольку файлы .pacorig создаются, как правило, при особых обстоятельствах, не существует универсального способа их обработки. Вам может помочь просмотр новостей Arch, в которых могут содержаться инструкции, если в обновлении ожидаются подобные проблемы

$ sudo pacman -R -n  # позволяет полностью удалить все такие файлы, относящиеся к пакету. В этом случае файлов .pacsave создано не будет

## поиск ##

$ sudo updatedb  # обновим базу данных (требуется mlocate)

$ locate -e --regex "\.pac(new|orig|save)$"  # поиск этих файлов по всему диску (быстрый способ)

или

$ find / -regextype posix-extended -regex ".+\.pac(new|save|orig)" 2> /dev/null  # для поиска этих файлов по всему диску

еще проще

$ yaourt -C  # посмотреть какие .conf.pacnew и т.д. есть в системе

## pacnew - решение ##

$ vimdiff /etc/pacman.conf /etc/pacman.conf.pacnew  # сравнение файлов используя vim

# можно использовать программу meld